import java.io.*;
import java.util.*;

public class Main {
    public static int[] doli;

    public static int n;
    public static int toAdd=0;
    public static boolean isYes = true;
    public static boolean isYes1 = true;

    public static void main(String[] args) {
        try (BufferedReader reader = new BufferedReader(new FileReader("input.txt"));
             BufferedWriter writer = new BufferedWriter(new FileWriter("output.txt"))) {
            StringTokenizer tokenizer = new StringTokenizer(reader.readLine());
            n = Integer.parseInt(tokenizer.nextToken());
            doli = new int[n];
            int[][] matrix = new int[n][n];

            for (int i = 0; i < n; i++) {
                tokenizer = new StringTokenizer(reader.readLine());
                while (tokenizer.hasMoreTokens()) {
                    int to = Integer.parseInt(tokenizer.nextToken());
                    if(to!=0){
                        matrix[i][to - 1] = 1;
                        matrix[to - 1][i] = 1;}
                }
            }


            int[] res = new int[n];
            visited = new boolean[n];


            res = bfs(0, n, matrix, res);
            if(!isYes1){
                ++toAdd;
                for (int j=0;j<n;j++){
                    if( doli[j]==doliis|| doli[j]==doliis+1){
                        doli[j]=0;
                    }
                }
            }
            for (int i = 0; i < n; i++) {
                if (res[i] == 0) {
                    isYes=true;
                    isYes1=true;
                    doliis += 2;
                    res = bfs(i, n, matrix, res);
                    isYes=true;
                    if(!isYes1){
                        ++toAdd;
                        for (int j=0;j<n;j++){
                            if( doli[j]==doliis|| doli[j]==doliis+1){
                                doli[j]=0;
                            }
                        }
                    }
                }
            }

            if (!isYes) {


                writer.write("YES");
            } else {
                writer.write("NO");
                writer.newLine();
                int result = toCountres();
                writer.append(String.valueOf(result));

            }


        } catch (IOException e) {
            e.getMessage();
        }


    }


    public static int toCountres() {


        int[] count = new int[2*n];

        // Подсчёт частот
        for (int num : doli) {

            count[num]++;
        }

        int maxCount = 0;

        for (int i=1;i<2*n;i+=2) {
            int one=count[i];
            int two=0;

            if(i+1<2*n){
                two=count[i+1];

            }

            int cnt=Math.max(one,two);

            maxCount += cnt;

        }
        return maxCount+toAdd;
    }



    public static int doliis = 1;
    public static int indx = 1;
    public static boolean[] visited;

    public static int[] bfs(int start, int n, int[][] matrix, int[] res) {
        Queue<Integer> q = new ArrayDeque<>();

        doli[start] = doliis;

        res[start] = indx;
        ++indx;

        visited[start] = true;
        q.add(start);
        int curr;
        while (!q.isEmpty()) {
            curr = q.poll();
            for (int i = 0; i < n; i++) {

                if (matrix[curr][i] == 1 && !visited[i]) {
                    visited[i] = true;
                    doli[i] = (doliis * 2 + 1) - doli[curr];
                    res[i] = indx;
                    ++indx;
                    q.add(i);

                } else if (matrix[curr][i] == 1 && visited[i]) {
                    if (doli[i] == doli[curr]) {
                        isYes1=false;
                        isYes=false;
                    }
                }

            }


        }
        return res;
    }

}
