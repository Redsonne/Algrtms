import java.io.*;
import java.util.*;

public class Main {
public static  int n;
    public static  int m;
    public static int[] goalBoard;


    public static   int manhDist(int[] board) {
        int dist = 0;
        for (int i = 0; i < board.length; i++) {
            int val = board[i];
            if (val == 0) continue;
            int targetX = (val - 1) / m;
            int targetY = (val - 1) % m;
            int currX = i / m;
            int currY = i % m;
            dist += Math.abs(currX - targetX) + Math.abs(currY - targetY);
        }
        return dist;
    }
    public static void main(String[] args) {
        try (Scanner scanner = new Scanner(new File("input.txt"));
             BufferedWriter writer = new BufferedWriter(new FileWriter("output.txt"))) {
            n = scanner.nextInt();
             m = scanner.nextInt();
            int[] startmatrix = new int[n*m];
            for (int i = 0; i < n*m; i++) {
                startmatrix[i] = scanner.nextInt();
            }
            goalBoard = new int[n * m];
            for (int i = 0; i < n * m - 1; i++) goalBoard[i] = i + 1;
            goalBoard[n * m - 1] = 0;
            State start = new State(startmatrix, 0);
            State goal = new State(goalBoard, 0);
            int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
            PriorityQueue<State> pq = new PriorityQueue<>(Comparator.comparingInt(State::OCENKA));
            pq.add(start);

            Map<State, State> parent = new HashMap<>();
            Map<State, Integer> movedTile = new HashMap<>();
            Map<State, Integer> dist = new HashMap<>();
            List<Integer>  res = new ArrayList<>();
            dist.put(start, 0);
            int zx=0;
            int zy=0;
            int nx=0;
            int ny=0;

            while (!pq.isEmpty()) {
                State current = pq.poll();
                if (Arrays.equals(current.board, goal.board)) {
                    while (parent.containsKey(current)) {
                        res.add(movedTile.get(current));
                        current = parent.get(current);
                    }
                    Collections.reverse(res);
                   break;
                }

                 zx = current.zeroPos / m;
                zy = current.zeroPos % m;

                for (int[] d : dirs) {
                     nx = zx + d[0];
                             ny = zy + d[1];
                    if (nx >= 0 && nx < n && ny >= 0 && ny < m) {
                        int newZeroPos = nx * m + ny;
                        int[] newBoard = current.board.clone();
                        newBoard[current.zeroPos] = newBoard[newZeroPos];
                        newBoard[newZeroPos] = 0;

                        State next = new State(newBoard, current. shagi + 1);
                        if (!dist.containsKey(next) || next. shagi < dist.get(next)) {
                            dist.put(next, next. shagi);
                            parent.put(next, current);
                            movedTile.put(next, current.board[newZeroPos]);
                            pq.add(next);
                        }
                    }
                }
            }
writer.write(String.valueOf(res.size()));
            writer.newLine();
            for (int move : res) {
                writer.append(String.valueOf(move));
                writer.newLine();
            }


        } catch (IOException e) {
            e.getMessage();
        }
    }


 static class State {
        int[] board;
        int zeroPos, shagi, manhDist;

        State(int[] board, int g) {
            this.board = board.clone();
            this.shagi = g;
            for (int i = 0; i < board.length; i++) {
                if (board[i] == 0) zeroPos = i;
            }
            this.manhDist = manhDist(this.board);
        }

      public   int OCENKA() {
          return shagi + manhDist;
      }
      @Override
      public boolean equals(Object o) {
          return o instanceof State && Arrays.equals(board, ((State) o).board);
      }

      @Override
      public int hashCode() {
          return Arrays.hashCode(board);
      }

  }}
